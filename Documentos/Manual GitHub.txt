--Prerequisitos para Front
	A) Instalar node.js

--Prerequisitos para AWS CLI
	B) Instalar python

-- Conectar terminal SSH para trabajar con GIT.
1.- Generar Llaves SSHKey
	ssh-keygen -o

2.- Configura ssh para registrar llave 
    eval `ssh-agent`
    echo $SSH_AUTH_SOCK

3.- Registra llave en ssh
    ssh-add /d/Desarrollo-jom/Llaves/id_rsa-Ghub-JOM
    ssh-add /Users/a1234/.ssh/id_rsa

4.- Validar que la llave ssh está ok.
    ssh -T jorellana@MALAMBO
    ssh -T a1234@MacBook-Air-de-1234.local
           a1234@MacBook-Air-de-1234.local
    ssh -T git@github.com
    vi  ~/.ssh/known_hosts

4.1.- Para hacer Push se puede instalar GCM
    brew tap microsoft/git
    brew install --cask git-credential-manager-core
    brew upgrade git-credential-manager-core
    brew uninstall --cask git-credential-manager-core

5.- Registar llave publica en Cuenta Git Hub.

-- Configurar entorno Git
1.- Ver las configuraciones del Git
	git config --list

2.- ver origenes remotos existentes
    git remote -v

3.- Inicializar Git
	git config --global init.defaultBranch main
	git config --global user.email "javier.orellana.matus@outlook.com"
	git config --global user.name "JavierOrellanaMatus"
	git config --global pull.rebase false

	#git config pull.rebase false  # merge (the default strategy)
    #git config pull.rebase true   # rebase     
  	#git config pull.ff only       # fast-forward only

    #You can replace "git config" with "git config --global" to set a default
    #preference for all repositories. You can also pass --rebase, --no-rebase,
    #or --ff-only on the command line to override 
    #the configured default per invocation.


+-------------------
Instalar GitHubCli

brew install gh
brew upgrade gh

gh pr status
gh auth login
Git 

+-------------------

--  Crear Repositorio local 
1.- Ubicarse en ruta de trabajo
	cd D:\Desarrollo\

2.- Clonar repositorio
	git clone https://github.com/JavierOrellanaMatus/Taller-Git.git 

    …o Crear nuevo repositorio con archivo dummie
    echo "# fabrica" >> README.md
    git init
    git add README.md
    git commit -m "first commit"
    git branch -M master
    git remote add origin https://github.com/JavierOrellanaMatus/fabrica.git
    git push -u origin master

3.- Configurar origen remoto por defecto
    git remote set-url origin https://github.com/JavierOrellanaMatus/Taller-Git.git

4.- Inicializar Entorno 
    Git init 

5.- Ingresar a la ruta 
	cd D:\Desarrollo-jom\Taller-Git 
		
6.- Validar cambios estado de la rama y cambios pendientes
	git status

--  Crear o Replicar ramas 
--  (Nemotecnia: Desarrollo_NombreProyecto_Funcionalidad)
1.- Crear rama local a partir de rama actual 
	git checkout -b <nombre_rama_inexistente>
    git switch -c <nombre_rama_inexistente>

-- Cambiar de ramas
1.- Cambiar de rama
	git checkout <nombre_rama_conmiscambios>

-- Versionar cambios 
2.- Agregar todos los archivos con cambios de rama local (Todos los cambios).
	git add .

3.- Agregar archivo un cambio con cambios de rama local. 
	git add <nombre_archivo>

5.- agregar un tag a la rama 
    git tag v1.6 -m "mensaje"

6.- Subir cambios a rama al repositorio GitHub  
    git push -u origin master
	git push origin <rama_común_desarrollo)
    git push --tags

7.- Proteger cambios en repositorio GitHub 
	git commit -m "Titulo|Descripción del cambio"

8.- Validar que no hay cambios respecto a la rama local
	git pull origin <nombre_rama_conmiscambios>


-- Revisión de cambios 
1.- Ver el log del GIT 
    git log 

2.- Revisar la rama activa 
	git branch
    -- incluyendo ramas remotas
    git branch -a 

3.- Ver diferencias entre ramas
    git diff <rama 1> <rama 2>

-- En caso de conflictos
1.- Descartar cambios (opcional)
    \\ruta local\git checkout <nombre_objeto>
	
-- Realizar Merge 
1.-	Ubicarse en rama destino de los cambios
    git merge --no-ff <nombre_rama_conmiscambios>
	
-- Borrar rama
1.- Ubicarse en rama master 
    git branch -D nombre-rama

-- Deshacer agregación 
1.- Ubicarse en rama master
    git reset <nombre_archivo>

Este Archivo cambiará mucho dentro de poco
